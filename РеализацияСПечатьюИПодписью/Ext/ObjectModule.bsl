
#Область ПрограммныйИнтерфейс

&НаСервере
// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке();
	ПараметрыРегистрации.Вид = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
	ПараметрыРегистрации.Версия = "1.4";
	ПараметрыРегистрации.Назначение.Добавить("Документ.РеализацияТоваровУслуг");
	
	// ТОРГ-12
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12) (с печатью и подписью)'");
	НоваяКоманда.Идентификатор = "Торг12СПечатью";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	
	// ТОРГ-12 с услугами
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Товарная накладная (ТОРГ-12 с услугами) (с печатью и подписью)'");
	НоваяКоманда.Идентификатор = "Торг12СПечатьюУслуги";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	
	// Расходная накладная
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Расходная накладная (с печатью и подписью)'");
	НоваяКоманда.Идентификатор = "НакладнаяСПечатью";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	
	// Акт
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Акт об оказании услуг (с печатью и подписью)'");
	НоваяКоманда.Идентификатор = "АктСПечатью";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	
	// УПД
	НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
	НоваяКоманда.Представление = НСтр("ru = 'Универсальный передаточный документ (УПД) (с печатью и подписью)'");
	НоваяКоманда.Идентификатор = "УПДСПечатью";
	НоваяКоманда.Использование = ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыВызовСерверногоМетода();
	НоваяКоманда.ПоказыватьОповещение = Истина;
	НоваяКоманда.Модификатор = "ПечатьMXL";

	Возврат ПараметрыРегистрации;
	
КонецФункции

&НаСервере
// Интерфейс для выполнения команд обработки.
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Торг12СПечатьюУслуги") Тогда
		ВключатьУслуги = Истина;
		ТаблицаСведенийТОРГ12 = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Торг12СПечатьюУслуги",
			НСтр("ru = 'Торг-12 с услугами (с печатью и подписью)'"),
			ПечатьТорг12СПечатью(ТаблицаСведенийТОРГ12, ОбъектыПечати)
			);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Торг12СПечатью") Тогда
		ВключатьУслуги = Ложь;
		ТаблицаСведенийТОРГ12 = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийТОРГ12(МассивОбъектов, ВключатьУслуги);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Торг12СПечатью",
			НСтр("ru = 'ТОРГ-12 (с печатью и подписью)'"),
			ПечатьТорг12СПечатью(ТаблицаСведенийТОРГ12, ОбъектыПечати)
			);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяСПечатью") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"НакладнаяСПечатью",
			НСтр("ru = 'Расходная накладная (с печатью и подписью)'"),
			ПечатьНакладнаяСПечатью(МассивОбъектов, ОбъектыПечати),
			);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСПечатью") Тогда
		ТаблицаСведенийАктаОбОказанииУслуг = Документы.РеализацияТоваровУслуг.ПолучитьТаблицуСведенийАктаОбОказанииУслуг(МассивОбъектов);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"АктСПечатью", 
			НСтр("ru = 'Акт об оказании услуг (с печатью и подписью)'"),
			ПечатьАктаОбОказанииУслугСПечатью(ТаблицаСведенийАктаОбОказанииУслуг, ОбъектыПечати)
			);
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УПДСПечатью") Тогда
		ИменаФайлов = Неопределено;
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"УниверсальныйПередаточныйДокумент", 
			"УПДСПечатью",
			ПечатьКомплектаУПДСПечатью(
				КоллекцияПечатныхФорм, 
				МассивОбъектов, 
				ОбъектыПечати, 
				ИменаФайлов));
		ПараметрыВывода.Вставить("НеПереопределятьИмяФайла");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПечатьТорг12

&НаСервере
Функция ПечатьТорг12СПечатью(СведенияТОРГ12, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб         = Истина;
	ТабличныйДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ИмяПараметровПечати = "Торг12СПечатью";
	
	ПечатьТорговыхДокументов.УстановитьМинимальныеПоляПечати(ТабличныйДокумент);
	Макет = ПолучитьМакет("ПФ_MXL_ТОРГ12_СПечатью");
	
	ПервыйДокумент = Истина;
	СведенияОКонтрагентах = Новый Соответствие;
	КонтрагентыДляПечати = Новый Структура("Поставщик, Грузоотправитель, Покупатель, Грузополучатель");
	Для Каждого СведенияОДокументе Из СведенияТОРГ12 Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаДокумента = СведенияОДокументе.ТаблицаДокумента;
	
		ОбластьМакетаШапка            = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");
		ОбластьМакетаСтрока           = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаИтогоПоСтранице  = Макет.ПолучитьОбласть("ИтогоПоСтранице");
		ОбластьМакетаВсего            = Макет.ПолучитьОбласть("Всего");
		ОбластьМакетаПодвал           = Макет.ПолучитьОбласть("Подвал");
		
		// Получаем сведения об используемых в документе контрагентах с разными ролями в документообороте.
		Для каждого КонтрагентДляПечати Из КонтрагентыДляПечати Цикл
			
			КонтрагентИзДокумента = СведенияОДокументе[КонтрагентДляПечати.Ключ];
			СведенияОКонтрагенте = СведенияОКонтрагентах[КонтрагентИзДокумента];
			Если СведенияОКонтрагенте = Неопределено Тогда
				БанковскийСчетКонтрагента = ?(КонтрагентДляПечати.Ключ = "Поставщик", СведенияОДокументе.БанковскийСчетПродавца, Неопределено);
				СведенияОКонтрагенте = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
					КонтрагентИзДокумента, СведенияОДокументе.ДатаДляПолученияСведений, БанковскийСчетКонтрагента);
				СведенияОКонтрагентах.Вставить(КонтрагентИзДокумента, СведенияОКонтрагенте);
			КонецЕсли;
			КонтрагентыДляПечати.Вставить(КонтрагентДляПечати.Ключ, СведенияОКонтрагенте);
		
		КонецЦикла;
		
		// Выводим общие реквизиты шапки.
		ОбластьМакетаШапка.Параметры.Заполнить(СведенияОДокументе);
		
		Если ЗначениеЗаполнено(СведенияОДокументе.НомерИсправления) И ЗначениеЗаполнено(СведенияОДокументе.ДатаИсправления) Тогда
			
			ОбластьМакетаШапка.Параметры.ТекстИсправления 	= НСтр("ru='Исправление   '");
			ОбластьМакетаШапка.Параметры.НомерИсправления 	= СведенияОДокументе.НомерИсправления;
			ОбластьМакетаШапка.Параметры.ДатаИсправления 	= Формат(СведенияОДокументе.ДатаИсправления, "ДФ=dd.MM.yyyy");
			
			ЛинияГраницыРеквизитовИсправления = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
			ОбластьНомерИсправления = ОбластьМакетаШапка.Области.НомерИсправления;
			ОбластьНомерИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьНомерИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;
			
			ОбластьДатаИсправления = ОбластьМакетаШапка.Области.ДатаИсправления;
			ОбластьДатаИсправления.ГраницаСнизу 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСлева 	= ЛинияГраницыРеквизитовИсправления;
			ОбластьДатаИсправления.ГраницаСправа 	= ЛинияГраницыРеквизитовИсправления;

 		КонецЕсли;
		
		Если СведенияОДокументе.Поставщик = СведенияОДокументе.Грузоотправитель Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(КонтрагентыДляПечати.Поставщик);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузоотправитель, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.Подразделение) Тогда
			СведенияОПодразделении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СведенияОДокументе.Подразделение, "ОбособленноеПодразделение, НаименованиеПолное");
			ОбластьМакетаШапка.Параметры.ПредставлениеПодразделения = ?(СведенияОПодразделении.ОбособленноеПодразделение, СведенияОПодразделении.НаименованиеПолное, "");
		КонецЕсли; 
		
		Если СокрЛП(СведенияОДокументе.АдресДоставки) <> "" Тогда
			ПредставлениеГрузополучателяДоАдреса    = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузополучатель, "НаименованиеДляПечатныхФорм,ИНН,");
			ПредставлениеГрузополучателяПослеАдреса = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузополучатель, "Телефоны,НомерСчета,Банк,БИК,КоррСчет,");
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ?(СокрЛП(ПредставлениеГрузополучателяДоАдреса) = "",
				"", ПредставлениеГрузополучателяДоАдреса+", ") + СведенияОДокументе.АдресДоставки
				+ ?(СокрЛП(ПредставлениеГрузополучателяПослеАдреса)="", "", ", "+ПредставлениеГрузополучателяПослеАдреса);
		Иначе
			ОбластьМакетаШапка.Параметры.ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				КонтрагентыДляПечати.Грузополучатель, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ПредставлениеПоставщика  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(КонтрагентыДляПечати.Поставщик);
		ОбластьМакетаШапка.Параметры.ПредставлениеПлательщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(КонтрагентыДляПечати.Покупатель);
		
		// Выводим всевозможные коды
		ОбластьМакетаШапка.Параметры.ОрганизацияПоОКПО          = КонтрагентыДляПечати.Грузоотправитель.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ВидДеятельностиПоОКДП      = "";
		ОбластьМакетаШапка.Параметры.ГрузополучательПоОКПО      = КонтрагентыДляПечати.Грузополучатель.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПоставщикПоОКПО            = КонтрагентыДляПечати.Поставщик.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ПлательщикПоОКПО           = КонтрагентыДляПечати.Покупатель.КодПоОКПО;
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяНомер = "";
		ОбластьМакетаШапка.Параметры.ТранспортнаяНакладнаяДата  = "";
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Инициализация счетчика страниц
		НомерСтраницы = 1;
		
		// Инициализация итогов по странице
		ИтогоМестНаСтранице        = 0;
		ИтогоКоличествоНаСтранице  = 0;
		ИтогоСуммаБезНДСНаСтранице = 0;
		ИтогоНДСНаСтранице         = 0;
		ИтогоСуммаСНДСНаСтранице   = 0;
		
		// Инициализация итогов по документу
		ИтогоМест        = 0;
		ИтогоКоличество  = 0;
		ИтогоСуммаСНДС   = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоНДС         = 0;
		
		// Инициализация счетчика строк
		НомерСтроки     = 0;
		КоличествоСтрок = ТаблицаДокумента.Количество();
		
		// Выводим заголовок многострочной части
		ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
		
		// Выводим многострочную часть документа
		Для Каждого СтрокаДокумента Из ТаблицаДокумента Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакетаСтрока.Параметры.Номер = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.ТоварНаименование 	   	 = СтрокаДокумента.ТоварНаименование;
			ОбластьМакетаСтрока.Параметры.ТоварКод 					 = СтрокаДокумента.ТоварКод;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаНаименование = СтрокаДокумента.ЕдиницаИзмеренияНаименование;
			ОбластьМакетаСтрока.Параметры.БазоваяЕдиницаКодПоОКЕИ    = СтрокаДокумента.ЕдиницаИзмеренияКод;
			
			ОбластьМакетаСтрока.Параметры.КоличествоМест             = СтрокаДокумента.КоличествоМест;
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.КоличествоМест) Тогда
				ОбластьМакетаСтрока.Параметры.ВидУпаковки           = "";
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте = "";
			Иначе
				ОбластьМакетаСтрока.Параметры.ВидУпаковки                = СтрокаДокумента.ВидУпаковкиНаименование;
				ОбластьМакетаСтрока.Параметры.КоличествоВОдномМесте      = СтрокаДокумента.КоличествоВОдномМесте;
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Количество                 = СтрокаДокумента.Количество;
			ОбластьМакетаСтрока.Параметры.Цена                       = СтрокаДокумента.Цена;
			ОбластьМакетаСтрока.Параметры.СуммаБезНДС                = СтрокаДокумента.СуммаБезНДС;
			ОбластьМакетаСтрока.Параметры.СтавкаНДС                  = СтрокаДокумента.СтавкаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаНДС                   = СтрокаДокумента.СуммаНДС;
			ОбластьМакетаСтрока.Параметры.СуммаСНДС                  = СтрокаДокумента.СуммаСНДС;
			
			// Проверим вывод
			СтрокаСПодвалом = Новый Массив;
			Если НомерСтроки = 1 Тогда
				СтрокаСПодвалом.Добавить(ОбластьМакетаЗаголовокТаблицы); // если первая строка, то должен
			КонецЕсли;                                                   // помещаться заголовок
			СтрокаСПодвалом.Добавить(ОбластьМакетаСтрока);
			СтрокаСПодвалом.Добавить(ОбластьМакетаИтогоПоСтранице);
			Если НомерСтроки = КоличествоСтрок Тогда           			 // если последняя строка, должен
				СтрокаСПодвалом.Добавить(ОбластьМакетаВсего);  			 // помещаться и подвал документа
				СтрокаСПодвалом.Добавить(ОбластьМакетаПодвал);
			КонецЕсли;
			
			Если НЕ ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, СтрокаСПодвалом) Тогда
				
				Если КоличествоСтрок > 1 Тогда
					
					// Выводим итоги по странице
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
					ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
					ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
					
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					
					// Очистим итоги по странице
					ИтогоМестНаСтранице        = 0;
					ИтогоКоличествоНаСтранице  = 0;
					ИтогоСуммаБезНДСНаСтранице = 0;
					ИтогоНДСНаСтранице         = 0;
					ИтогоСуммаСНДСНаСтранице   = 0;
					
					// Выведем заголовок таблицы
					НомерСтраницы = НомерСтраницы + 1;
					ОбластьМакетаЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
					ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовокТаблицы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			// Увеличим итоги по странице
			ИтогоМестНаСтранице        = ИтогоМестНаСтранице        + СтрокаДокумента.КоличествоМест;
			ИтогоКоличествоНаСтранице  = ИтогоКоличествоНаСтранице  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДСНаСтранице = ИтогоСуммаБезНДСНаСтранице + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДСНаСтранице         = ИтогоНДСНаСтранице         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДСНаСтранице   = ИтогоСуммаСНДСНаСтранице   + СтрокаДокумента.СуммаСНДС;
			
			// Увеличим итоги по документу
			ИтогоМест        = ИтогоМест        + СтрокаДокумента.КоличествоМест;
			ИтогоКоличество  = ИтогоКоличество  + СтрокаДокумента.Количество;
			ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СтрокаДокумента.СуммаБезНДС;
			ИтогоНДС         = ИтогоНДС         + СтрокаДокумента.СуммаНДС;
			ИтогоСуммаСНДС   = ИтогоСуммаСНДС   + СтрокаДокумента.СуммаСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по странице
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогМестПоСтранице       = ИтогоМестНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогКоличествоПоСтранице = ИтогоКоличествоНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыПоСтранице      = ИтогоСуммаБезНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогНДСПоСтранице        = ИтогоНДСНаСтранице;
		ОбластьМакетаИтогоПоСтранице.Параметры.ИтогСуммыСНДСПоСтранице  = ИтогоСуммаСНДСНаСтранице;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаИтогоПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакетаВсего.Параметры.ИтогМест       = ИтогоМест;
		ОбластьМакетаВсего.Параметры.ИтогКоличество = ИтогоКоличество;
		ОбластьМакетаВсего.Параметры.ИтогСуммы      = ИтогоСуммаБезНДС;
		ОбластьМакетаВсего.Параметры.ИтогНДС        = ИтогоНДС;
		ОбластьМакетаВсего.Параметры.ИтогСуммыСНДС  = ИтогоСуммаСНДС;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаВсего);
		
		// Выводим подвал документа
		ОбластьМакетаПодвал.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(ТаблицаДокумента.Количество(), ,",,,,,,,,0");
		ОбластьМакетаПодвал.Параметры.ВсегоМестПрописью                       	= ?(ИтогоМест = 0, "", ЧислоПрописью(ИтогоМест, ,",,,С,,,,,0")); 
		
		ОбластьМакетаПодвал.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, СведенияОДокументе.Валюта);
		
		// Реализация. Выведем в печатную форму картинки
		ДвоичныеДанныеПечати = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(СведенияОДокументе.Организация, "ФайлПечать");
		ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(СведенияОДокументе.Организация, "ФайлПодписьРуководителя");
		ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(СведенияОДокументе.Организация, "ФайлПодписьГлавногоБухгалтера");
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеПечати)
			ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) 
			ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
			
			// Подставляем подписи только ответственных лиц
			ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(СведенияОДокументе.Организация, СведенияОДокументе.ДатаДокумента);
			
			ОбластьМакетаПодвал.Рисунки.Печать.Картинка                    = Новый Картинка(ДвоичныеДанныеПечати);
			// В случае если используется факсимильная подпись выводим данные ответственных лиц
			Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
				СведенияОДокументе.Руководитель                    = ОтветственныеЛицаОрганизации.Руководитель;
				СведенияОДокументе.РуководительФИО                 = ОтветственныеЛицаОрганизации.РуководительПредставление;
				ОбластьМакетаПодвал.Рисунки.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			КонецЕсли;
			Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
				СведенияОДокументе.ГлавныйБухгалтер                      = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
				СведенияОДокументе.ГлавныйБухгалтерФИО                   = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
				ОбластьМакетаПодвал.Рисунки.ПодписьГлавногоБухгалтера.Картинка = Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера);
			КонецЕсли;
		КонецЕсли;
		
		ЗаРуководителяНаОсновании = ?(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование = "", "" , ", "+СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
		ОбластьМакетаПодвал.Параметры.ФИОРуководителя       = СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании;
		ОбластьМакетаПодвал.Параметры.ДолжностьРуководителя = СведенияОДокументе.РуководительДолжность;
		
		ЗаГлавногоБухгалтераНаОсновании = ?(СведенияОДокументе.ЗаГлавногоБухгалтераНаОснованииНаименование = "", "" , ", "+СведенияОДокументе.ЗаГлавногоБухгалтераНаОснованииНаименование);
		ОбластьМакетаПодвал.Параметры.ФИОГлавБухгалтера = СведенияОДокументе.ГлавныйБухгалтерФИО + ЗаГлавногоБухгалтераНаОсновании;
		
		ОбластьМакетаПодвал.Параметры.ФИОКладовщика = СведенияОДокументе.КладовщикФИО;
		ОбластьМакетаПодвал.Параметры.ДолжностьКладовщика = СведенияОДокументе.КладовщикДолжность;
		
		Если ЗначениеЗаполнено(СведенияОДокументе.ДатаПодписанияДокумента) Тогда
			ПолнаяДатаДокумента = Формат(СведенияОДокументе.ДатаПодписанияДокумента, "ДФ=""дд ММММ гггг """"года""""""");
			ДлинаСтроки         = СтрДлина(ПолнаяДатаДокумента);
			ПервыйРазделитель   = СтрНайти(ПолнаяДатаДокумента," ");
			ВторойРазделитель   = СтрНайти(Прав(ПолнаяДатаДокумента,ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;
			
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель - 1) + """";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);
		Иначе
			ОбластьМакетаПодвал.Параметры.ДатаДокументаДень  = """     """;
			ОбластьМакетаПодвал.Параметры.ДатаДокументаМесяц = "";
			ОбластьМакетаПодвал.Параметры.ДатаДокументаГод   = " 20     года";	
		КонецЕсли;
		
		ДлинаСтрокиДоверенность = СтрДлина(СведенияОДокументе.ДоверенностьВыдана);
		Если ДлинаСтрокиДоверенность < 70 Тогда
		
			ДоверенностьВыдана = СведенияОДокументе.ДоверенностьВыдана;
			ДоверенностьВыдана1 = "";
		
		Иначе
			// Разбиваем строку на две подстроки, таким образом чтобы первая строка была не более 70ти символов
			// Для этого ищем очередной пробел и проверяем длину строк в предположении, что перенос будет выполнен по найденной позиции.
			ДоверенностьВыдана1 = СведенияОДокументе.ДоверенностьВыдана;
			ПозицияПоиска = СтрНайти(ДоверенностьВыдана1," ")+1;
			
			// Если найден очередной пробел и длина первой строки после операции будет менее 70ти символов, то выполняем еще одну итерацию.
			Пока ПозицияПоиска > 1 И ДлинаСтрокиДоверенность - СтрДлина(ДоверенностьВыдана1) + ПозицияПоиска < 70 Цикл
				
				ДоверенностьВыдана1 = Сред(ДоверенностьВыдана1, ПозицияПоиска);
				ПозицияПоиска       = СтрНайти(ДоверенностьВыдана1," ")+1;
				
			КонецЦикла; 
			
			ДоверенностьВыдана = Лев(СведенияОДокументе.ДоверенностьВыдана,ДлинаСтрокиДоверенность - СтрДлина(ДоверенностьВыдана1));
			
		КонецЕсли; 
		
		ДанныеДоверенность = Новый Структура;
		ДанныеДоверенность.Вставить("ДоверенностьНомер", СведенияОДокументе.ДоверенностьНомер);
		ДанныеДоверенность.Вставить("ДоверенностьВыдана", ДоверенностьВыдана);
		ДанныеДоверенность.Вставить("ДоверенностьВыдана1", ДоверенностьВыдана1);
		ДанныеДоверенность.Вставить("ДоверенностьЧерезКого", СведенияОДокументе.ДоверенностьЧерезКого);
		ДанныеДоверенность.Вставить("ДоверенностьДата",?(ЗначениеЗаполнено(СведенияОДокументе.ДоверенностьДата), Формат(СведенияОДокументе.ДоверенностьДата, "ДЛФ=ДД"), ""));
		
		ОбластьМакетаПодвал.Параметры.Заполнить(ДанныеДоверенность);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ПечатьНакладная

&НаСервере
// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладнаяСПечатью(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "НакладнаяСПечатью";
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	ДокументРеализацияТоваровУслуг.Номер КАК Номер,
	|	ДокументРеализацияТоваровУслуг.Дата КАК Дата,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДокументРеализацияТоваровУслуг.Контрагент КАК Получатель,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Организация,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.Организация КАК Поставщик,
	|	ДокументРеализацияТоваровУслуг.Ссылка.Склад КАК Склад,
	|	ДокументРеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.Номенклатура КАК Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена КАК Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслуг.НомерГТД КАК НомерГТД,
	|	СУММА(РеализацияТоваровУслуг.Количество) КАК Количество,
	|	СУММА(РеализацияТоваровУслуг.КоличествоМест) КАК КоличествоМест,
	|	СУММА(РеализацияТоваровУслуг.Сумма) КАК Сумма,
	|	СУММА(РеализацияТоваровУслуг.СуммаНДС) КАК СуммаНДС,
	|	МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_ВложенныйЗапросПоТоварам
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|		ПО РеализацияТоваровУслуг.Ссылка = ДокументРеализацияТоваровУслуг.Ссылка
	|ГДЕ
	|	ДокументРеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.СтавкаНДС,
	|	РеализацияТоваровУслуг.СтранаПроисхождения,
	|	РеализацияТоваровУслуг.НомерГТД,
	|	ДокументРеализацияТоваровУслуг.Ссылка,
	|	ДокументРеализацияТоваровУслуг.Номер,
	|	ДокументРеализацияТоваровУслуг.Дата,
	|	ДокументРеализацияТоваровУслуг.ДоговорКонтрагента,
	|	ДокументРеализацияТоваровУслуг.Контрагент,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	ДокументРеализацияТоваровУслуг.СуммаДокумента,
	|	ДокументРеализацияТоваровУслуг.ВалютаДокумента,
	|	ДокументРеализацияТоваровУслуг.СуммаВключаетНДС,
	|	ДокументРеализацияТоваровУслуг.Организация,
	|	ДокументРеализацияТоваровУслуг.Ссылка.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапросПоТоварам.Ссылка КАК Ссылка,
	|	ВложенныйЗапросПоТоварам.Номер КАК Номер,
	|	ВложенныйЗапросПоТоварам.Дата КАК Дата,
	|	ВложенныйЗапросПоТоварам.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВложенныйЗапросПоТоварам.Получатель КАК Получатель,
	|	ВложенныйЗапросПоТоварам.Организация КАК Организация,
	|	ВложенныйЗапросПоТоварам.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВложенныйЗапросПоТоварам.Организация КАК Поставщик,
	|	ВложенныйЗапросПоТоварам.Ссылка.Склад КАК Склад,
	|	ВложенныйЗапросПоТоварам.Ссылка.ОтпускПроизвел КАК ОтпускПроизвел,
	|	ВложенныйЗапросПоТоварам.СуммаДокумента КАК СуммаДокумента,
	|	ВложенныйЗапросПоТоварам.ВалютаДокумента КАК ВалютаДокумента,
	|	ВложенныйЗапросПоТоварам.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ВложенныйЗапросПоТоварам.Номенклатура,
	|	ВложенныйЗапросПоТоварам.Номенклатура.НаименованиеПолное КАК Товар,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА ВложенныйЗапросПоТоварам.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА ВложенныйЗапросПоТоварам.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК Артикул,
	|	ВложенныйЗапросПоТоварам.Количество,
	|	ВложенныйЗапросПоТоварам.КоличествоМест,
	|	ВложенныйЗапросПоТоварам.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВложенныйЗапросПоТоварам.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаХранения,
	|	ВложенныйЗапросПоТоварам.Цена,
	|	ВложенныйЗапросПоТоварам.Сумма,
	|	ВложенныйЗапросПоТоварам.СуммаНДС,
	|	ВложенныйЗапросПоТоварам.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ВложенныйЗапросПоТоварам.НомерГТД КАК НомерГТД,
	|	ВложенныйЗапросПоТоварам.НомерСтроки,
	|	1 КАК ID
	|ИЗ
	|	ВТ_ВложенныйЗапросПоТоварам КАК ВложенныйЗапросПоТоварам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	РеализацияТоваровУслуг.Ссылка.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	0,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	РеализацияТоваровУслуг.Ссылка.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	3
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Ссылка.Номер,
	|	РеализацияТоваровУслуг.Ссылка.Дата,
	|	РеализацияТоваровУслуг.Ссылка.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Ссылка.Контрагент,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.ПодразделениеОрганизации,
	|	РеализацияТоваровУслуг.Ссылка.Организация,
	|	РеализацияТоваровУслуг.Ссылка.Склад,
	|	РеализацияТоваровУслуг.Ссылка.ОтпускПроизвел,
	|	РеализацияТоваровУслуг.Ссылка.СуммаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.ВалютаДокумента,
	|	РеализацияТоваровУслуг.Ссылка.СуммаВключаетНДС,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ РеализацияТоваровУслуг.Содержание ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Содержание
	|		КОГДА НЕ РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное
	|		ИНАЧЕ РеализацияТоваровУслуг.Номенклатура.Наименование
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА РеализацияТоваровУслуг.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ,
	|	РеализацияТоваровУслуг.Количество,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.Номенклатура.ЕдиницаИзмерения,
	|	РеализацияТоваровУслуг.Цена,
	|	РеализацияТоваровУслуг.Сумма,
	|	РеализацияТоваровУслуг.СуммаНДС,
	|	NULL,
	|	NULL,
	|	РеализацияТоваровУслуг.НомерСтроки,
	|	4
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	ID,
	|	ВложенныйЗапросПоТоварам.НомерСтроки";
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Макет = ПолучитьМакет("ПФ_MXL_НакладнаяСПечатью");

		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка.Ссылка, "Расходная накладная");
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		СведенияОбОрганизации   = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик 				= Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);

		ЕстьСкидки = Ложь;

		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ШапкаТаблицы|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Артикул";
			ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
				ОбластьКодов.Параметры.ИмяКолонкиКодов = "Код";
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);

		ОбластьКолонкаТовар = Макет.Область("Товар");

		Если НЕ ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		Если НЕ ЕстьСкидки Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки + 
												Макет.Область("СуммаБезСкидки").ШиринаКолонки +
												Макет.Область("СуммаСкидки").ШиринаКолонки;
		КонецЕсли;

		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Строка|Сумма");

		Сумма    = 0;
		СуммаНДС = 0;
		ВсегоСкидок    = 0;
		ВсегоБезСкидок = 0;
        КоличествоСтрок = 0;

		НомерСтроки = 0;

		Пока Шапка.Следующий() Цикл 
			
			Если Шапка.Номенклатура = Null Тогда 
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;

			ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомера);

			Если ВыводитьКоды Тогда
				ОбластьКодов.Параметры.Заполнить(Шапка);
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(Шапка);
			ОбластьДанных.Параметры.Товар = СокрЛП(Шапка.Товар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);

			Скидка = 0;
			
			ОбластьСуммы.Параметры.Заполнить(Шапка);
			ТабличныйДокумент.Присоединить(ОбластьСуммы);
			Сумма          = Сумма       + ?(ЗначениеЗаполнено(Шапка.Сумма), Шапка.Сумма, 0);
			СуммаНДС       = СуммаНДС    + ?(ЗначениеЗаполнено(Шапка.СуммаНДС), Шапка.СуммаНДС, 0);
			ВсегоСкидок    = ВсегоСкидок + Скидка;
			ВсегоБезСкидок = Сумма       + ВсегоСкидок;
			
			КоличествоСтрок = КоличествоСтрок + 1;

		КонецЦикла;

		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("Итого|Сумма");

		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьСуммы.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
		
		// Вывести ИтогоНДС
		ОбластьНомера = Макет.ПолучитьОбласть("ИтогоНДС|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ИтогоНДС|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ИтогоНДС|Данные");
		ОбластьСуммы  = Макет.ПолучитьОбласть("ИтогоНДС|Сумма");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		
		Если СуммаНДС <> 0 Тогда
			ОбластьСуммы.Параметры.ВсегоНДС  = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ОбластьДанных.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, "В том числе НДС", " Сумма НДС");
		Иначе
			ОбластьСуммы.Параметры.ВсегоНДС  = "-";
			ОбластьДанных.Параметры.НДС      = "Без налога (НДС)";
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ТабличныйДокумент.Присоединить(ОбластьСуммы);
				
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + КоличествоСтрок
			+ ", на сумму " + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	
		// Реализация. Выведем в печатную форму картинки
		ДвоичныеДанныеПечати = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПечать");
		ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(Шапка.Организация, "ФайлПодписьРуководителя");
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеПечати)
			ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
			
			// Подставляем подписи только ответственных лиц
			ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Организация, Шапка.Дата);
			ОбластьМакета.Рисунки.Печать.Картинка = Новый Картинка(ДвоичныеДанныеПечати);
			// В случае если используется факсимильная подпись выводим данные ответственных лиц
			Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
				ОтпускПроизвел = ОтветственныеЛицаОрганизации.Руководитель;
				ОбластьМакета.Рисунки.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			Иначе
				ОтпускПроизвел = Шапка.ОтпускПроизвел;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОтпускПроизвел) Тогда
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, ОтпускПроизвел, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ОтветственныйПредставление = Представление;
		ИначеЕсли Шапка.Склад <> Справочники.Склады.ПустаяСсылка() Тогда 
			МОЛ = ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Шапка.Склад, Шапка.Дата);
			ДанныеФизЛица = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(Шапка.Организация, МОЛ, Шапка.Дата);
			Представление = ?(ЗначениеЗаполнено(ДанныеФизЛица.Должность), Строка(ДанныеФизЛица.Должность) + " ", "");
			Представление = Представление + ?(ЗначениеЗаполнено(ДанныеФизЛица.Представление), Строка(ДанныеФизЛица.Представление), "");
			ОбластьМакета.Параметры.ОтветственныйПредставление = Представление;
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьМакета);

		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область ПечатьАкт

&НаСервере
Функция ПечатьАктаОбОказанииУслугСПечатью(СведенияАктаОбОказанииУслуг, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати	= "АктСПечатью";

	Макет = ПолучитьМакет("ПФ_MXL_АктСПечатью");
	
	ПервыйДокумент = Истина;
	
	Для Каждого СведенияОДокументе ИЗ СведенияАктаОбОказанииУслуг Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ЭтоПечатьЗаПоставщика = Ложь;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТаблицаУслуги = СведенияОДокументе.ТаблицаДокумента;
		
		// Выводим шапку документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ДанныеПечатиЗаголовок = Новый Структура("ТекстЗаголовка, ТекстЗаголовкаИсправления");
		ТекстЗаголовка = НСтр("ru='Акт № %1 от %2 г.'");
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, 
			СведенияОДокументе.НомерДокумента, 
			Формат(СведенияОДокументе.ДатаДокумента, "ДФ='дд ММММ гггг'"));
		ДанныеПечатиЗаголовок.Вставить("ТекстЗаголовка", ТекстЗаголовка);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиЗаголовок);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		СведенияОбПоставщике    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Поставщик, СведенияОДокументе.ДатаДокумента, СведенияОДокументе.БанковскийСчетПродавца);
				
		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, 
			"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ДанныеПечатиПоставщик = Новый Структура;
		ДанныеПечатиПоставщик.Вставить("ПредставлениеПоставщика", ПредставлениеПоставщика);
		ДанныеПечатиПоставщик.Вставить("Поставщик", СведенияОДокументе.Поставщик);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПоставщик);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		Если Макет.Области.Найти("Получатель") <> Неопределено Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Получатель");	
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		КонецЕсли;
		СведенияОКонтрагенте    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(СведенияОДокументе.Получатель, СведенияОДокументе.ДатаДокумента);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, 
			"НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
		
		ДанныеПечатиПолучатель = Новый Структура;
		ДанныеПечатиПолучатель.Вставить("ПредставлениеПолучателя", ПредставлениеПолучателя);
		ДанныеПечатиПолучатель.Вставить("Получатель", СведенияОДокументе.Получатель);
		ДанныеПечатиПолучатель.Вставить("Основание", СведенияОДокументе.ПредставлениеДоговора);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПолучатель);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Инициализация счетчика строк
		НомерСтроки = 0;
		
		// Выводим заголовок многострочной части
		ОбластьШапки = ?(ВыводитьКоды, "ШапкаСКодом", "ШапкаТаблицы");
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		ОбластьМакета.Параметры.Заполнить(СведенияОДокументе);
		ДанныеПечатиКод = Новый Структура;
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Артикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ДанныеПечатиКод.Вставить("ИмяКодАртикул", "Код");
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиКод);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
		ОбластьСтроки = Макет.ПолучитьОбласть(ОбластьСтроки);

		// Выводим многострочную часть документа
		Для каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			СтруктураПараметры = Новый Структура();
			СтруктураПараметры.Вставить("НомерСтроки", 				НомерСтроки);
			СтруктураПараметры.Вставить("НоменклатураНаименование", СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
			СтруктураПараметры.Вставить("Товар", 				   	СокрЛП(СтрокаТабличнойЧасти.НоменклатураНаименование));
			СтруктураПараметры.Вставить("Номенклатура", 			СтрокаТабличнойЧасти.Номенклатура);
			СтруктураПараметры.Вставить("Количество", 				СтрокаТабличнойЧасти.Количество);
			СтруктураПараметры.Вставить("ЕдиницаИзмерения", 		СтрокаТабличнойЧасти.ЕдиницаИзмеренияНаименование);
			СтруктураПараметры.Вставить("Цена", 				   	СтрокаТабличнойЧасти.Цена);
			СтруктураПараметры.Вставить("Сумма", 				   	СтрокаТабличнойЧасти.Сумма);
			
			Если ВыводитьКоды Тогда
				СтруктураПараметры.Вставить("НоменклатураКод", 		СтрокаТабличнойЧасти.НоменклатураКод);
				СтруктураПараметры.Вставить("КодАртикул", 			СтрокаТабличнойЧасти.НоменклатураКод);
			КонецЕсли;
		
			ОбластьСтроки.Параметры.Заполнить(СтруктураПараметры);
	
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;

		// Выводим подвал документа
		Если ТаблицаУслуги <> Неопределено Тогда
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		Иначе
			Сумма    = 0;
			СуммаНДС = 0;
		КонецЕсли;

		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(Новый Структура("Всего", ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма)));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		ДанныеПечатиИтогоНДС = Новый Структура("ВсегоНДС, НДС");
		Если СуммаНДС <> 0 Тогда
			ДанныеПечатиИтогоНДС.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС);
			ДанныеПечатиИтогоНДС.НДС      = ?(СведенияОДокументе.СуммаВключаетНДС, НСтр("ru='В том числе НДС'"), НСтр("ru='Сумма НДС'"));
		Иначе
			ДанныеПечатиИтогоНДС.ВсегоНДС = НСтр("ru='-'");
			ДанныеПечатиИтогоНДС.НДС      = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиИтогоНДС);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаКПрописи = Сумма + ?(СведенияОДокументе.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ИтоговаяСтрока = НСтр("ru='Всего оказано услуг %1, на сумму %2'");
		ИтоговаяСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИтоговаяСтрока, НомерСтроки, ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, СведенияОДокументе.Валюта));
		СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, СведенияОДокументе.Валюта);
		ДанныеПечатиСуммаПрописью = Новый Структура;
		ДанныеПечатиСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ДанныеПечатиСуммаПрописью.Вставить("СуммаПрописью", СуммаПрописью);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		// Выводим подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		
		// Реализация. Выведем в печатную форму картинки
		ДвоичныеДанныеПечати = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(СведенияОДокументе.Организация, "ФайлПечать");
		ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(СведенияОДокументе.Организация, "ФайлПодписьРуководителя");
		
		Если ЗначениеЗаполнено(ДвоичныеДанныеПечати)
			ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
			
			// Подставляем подписи только ответственных лиц
			ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(СведенияОДокументе.Организация, СведенияОДокументе.ДатаДокумента);
			
			ОбластьМакета.Рисунки.Печать.Картинка                    = Новый Картинка(ДвоичныеДанныеПечати);
			// В случае если используется факсимильная подпись выводим данные ответственных лиц
			Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
				СведенияОДокументе.Руководитель                    = ОтветственныеЛицаОрганизации.Руководитель;
				СведенияОДокументе.РуководительФИО                 = ОтветственныеЛицаОрганизации.РуководительПредставление;
				ОбластьМакета.Рисунки.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			КонецЕсли;
		КонецЕсли;

		ЗаРуководителяНаОсновании = ?(ПустаяСтрока(СведенияОДокументе.ЗаРуководителяНаОснованииНаименование), "" , ", " + СведенияОДокументе.ЗаРуководителяНаОснованииНаименование);
		ЗаместительПоПриказу = СведенияОДокументе.РуководительФИО + ЗаРуководителяНаОсновании;

		ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбПоставщике, "НаименованиеДляПечатныхФорм");
		Если НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) И ЗначениеЗаполнено(ПредставлениеПоставщика) Тогда 
			ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование + ", " + ПредставлениеПоставщика;
		ИначеЕсли НЕ ЭтоПечатьЗаПоставщика И ЗначениеЗаполнено(СведенияОДокументе.РуководительДолжностьНаименование) Тогда 
			ДолжностьИНазваниеОрганизации = СведенияОДокументе.РуководительДолжностьНаименование;
		Иначе
			ДолжностьИНазваниеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		
		
		ПредставлениеЗаказчика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКонтрагенте, "НаименованиеДляПечатныхФорм");
		ДанныеПечатиПодписи = Новый Структура;
		ДанныеПечатиПодписи.Вставить("НазваниеЗаказчика", ПредставлениеЗаказчика);
		
		Если НЕ ЭтоПечатьЗаПоставщика Тогда
			Если ЗначениеЗаполнено(СведенияОДокументе.ЗаЗаказчикаНаОсновании) Тогда
				ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика+", "+СведенияОДокументе.ЗаЗаказчикаНаОсновании;
			Иначе
				ПредставительЗаказчика = СведенияОДокументе.ПредставительЗаказчика;
			КонецЕсли;
			ДанныеПечатиПодписи.Вставить("ПредставительЗаказчика", ПредставительЗаказчика);
		КонецЕсли;
		
		ДанныеПечатиПодписи.Вставить("ДолжностьИНазваниеОрганизации", ДолжностьИНазваниеОрганизации);
		ДанныеПечатиПодписи.Вставить("ЗаместительПоПриказу", ЗаместительПоПриказу);
		ОбластьМакета.Параметры.Заполнить(ДанныеПечатиПодписи);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, СведенияОДокументе.Документ);

	КонецЦикла;

	Возврат ТабличныйДокумент;

КонецФункции

#КонецОбласти

#Область ПечатьУПД

&НаСервере
Функция ПечатьКомплектаУПДСПечатью(КоллекцияПечатныхФорм, МассивОбъектов, ОбъектыПечати, ИменаФайлов)

	НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(МассивОбъектов);
	
	Для каждого ДокументБезСчетаФактуры Из НастройкиПечати.ДокументыБезСчетовФактур Цикл
		
		Если НастройкиПечати.ДокументыСчетФактураНеТребуются.Найти(ДокументБезСчетаФактуры) = Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'По документу %1 счет-фактура не выписан'");
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ДокументБезСчетаФактуры);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеОбъектовПечати = Новый ТаблицаЗначений;
	СоответствиеОбъектовПечати.Колонки.Добавить("ДокументРеализации");
	СоответствиеОбъектовПечати.Колонки.Добавить("СчетФактура");
	
	МакетыУПД = Новый Соответствие;
	
	Для Каждого ЭлементМассиваОбъектов Из МассивОбъектов Цикл
		
		ПараметрМассив = Новый Массив;
		ПараметрМассив.Добавить(ЭлементМассиваОбъектов);
		НастройкиПечатиПоДокументу = УчетНДСВызовСервера.ПолучитьНастройкиПечатиУниверсальныхПередаточныхДокументов(ПараметрМассив);
		УПДПоДокументу = НастройкиПечатиПоДокументу.УниверсальныеПередаточныеДокументы;
		
		СтрокаТаблицыСоответствия = СоответствиеОбъектовПечати.Добавить();
		СтрокаТаблицыСоответствия.ДокументРеализации = ЭлементМассиваОбъектов;
		Если УПДПоДокументу.Количество() > 0 Тогда
			СтрокаТаблицыСоответствия.СчетФактура = УПДПоДокументу[0];
		Иначе
			СтрокаТаблицыСоответствия.СчетФактура = Неопределено;
		КонецЕсли;
		
		ЭлементСоответствияМакетов = МакетыУПД.Получить(НастройкиПечатиПоДокументу.СписокМакетов);
		Если ЭлементСоответствияМакетов = Неопределено Тогда
			МакетыУПД.Вставить(НастройкиПечатиПоДокументу.СписокМакетов,НастройкиПечатиПоДокументу.УниверсальныеПередаточныеДокументы);
		Иначе
			Для Каждого ЭлементМассиваУПД Из НастройкиПечатиПоДокументу.УниверсальныеПередаточныеДокументы Цикл
				ЭлементСоответствияМакетов.Добавить(ЭлементМассиваУПД);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектыПечатиУПД = Новый СписокЗначений;
	Для Каждого ЭлементОбъектовПечати Из ОбъектыПечати Цикл
		СтрокаТаблицыСоответствия = СоответствиеОбъектовПечати.Найти(ЭлементОбъектовПечати.Значение, "ДокументРеализации");
		Если СтрокаТаблицыСоответствия <> Неопределено Тогда
			ОбъектыПечатиУПД.Добавить(СтрокаТаблицыСоответствия.СчетФактура, ЭлементОбъектовПечати.Представление);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокКоллекции = КоллекцияПечатныхФорм.НайтиСтроки(Новый Структура("ИмяМакета","УПДСПечатью"));
	Для Каждого СтрокаКоллекции Из МассивСтрокКоллекции Цикл
		СтрокаКоллекции.ИмяМакета = "УПДСПечатью";
		СтрокаКоллекции.ИмяВРЕГ = ВРег("УниверсальныйПередаточныйДокумент");
	КонецЦикла;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ИменаФайлов = Новый Соответствие;
	Для Каждого МакетУПД Из МакетыУПД Цикл
		
		МассивОбъектовПечатьУПД = МакетУПД.Значение;
		
		Если МакетУПД.Ключ = "УПДСтатус1" Тогда
			ТабДокумент = ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектовПечатьУПД, ОбъектыПечатиУПД, 
				Документы.СчетФактураВыданный.ТекстЗапросаПечатьСчетовФактур(Истина, Истина),, ТабДокумент);
		ИначеЕсли МакетУПД.Ключ = "УПДСтатус2" Тогда
			ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов = "";
			Для каждого Объект Из МассивОбъектовПечатьУПД Цикл
				Если ТипЗнч(Объект) <> Тип("ДокументСсылка.СчетФактураВыданный") Тогда
					ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов = 
						Документы[Объект.Метаданные().Имя].ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПустаяСтрока(ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов) Тогда
				ТабДокумент = ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектовПечатьУПД, ОбъектыПечатиУПД, 
					ТекстЗапросаПечатьУниверсальныхПередаточныхДокументов, Истина, ТабДокумент);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ЭлементОбъектыПечати Из ОбъектыПечатиУПД Цикл
			СтрокиТаблицыСоответствия = СоответствиеОбъектовПечати.НайтиСтроки(Новый Структура("СчетФактура", ЭлементОбъектыПечати.Значение));
			Для Каждого СтрокаТаблицыСоответствия Из СтрокиТаблицыСоответствия Цикл
				Если ОбъектыПечати.НайтиПоЗначению(СтрокаТаблицыСоответствия.ДокументРеализации) = Неопределено Тогда
					ОбъектыПечати.Добавить(СтрокаТаблицыСоответствия.ДокументРеализации, ЭлементОбъектыПечати.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Шаблон = НСтр("ru = 'УПД №[Номер] от [Дата]'");
		ЗначенияРеквизитовДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОбъектовПечатьУПД, "Номер, Дата, Ссылка");
		Для Каждого ЭлементМассива Из МассивОбъектовПечатьУПД Цикл
			ЗначенияРеквизитовДокумента = ЗначенияРеквизитовДокументов[ЭлементМассива];
			ПредставлениеДаты = Формат(ЗначенияРеквизитовДокумента.Дата, "ДЛФ=DD");
			ДлинаСтроки = СтрДлина(ПредставлениеДаты);
			ПредставлениеДаты = ?(Сред(ПредставлениеДаты, ДлинаСтроки) = ".", Лев(ПредставлениеДаты, ДлинаСтроки - 1), ПредставлениеДаты);
			ЗначенияРеквизитовДокумента.Дата = ПредставлениеДаты;
			ЗначенияРеквизитовДокумента.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ЗначенияРеквизитовДокумента.Номер, Истина, Ложь);
			ИмяФайла = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, ЗначенияРеквизитовДокументов[ЭлементМассива]);
			СтрокиТаблицыСоответствия = СоответствиеОбъектовПечати.НайтиСтроки(Новый Структура("СчетФактура", ЭлементМассива));
			Для Каждого СтрокаТаблицыСоответствия Из СтрокиТаблицыСоответствия Цикл
				ИменаФайлов.Вставить(СтрокаТаблицыСоответствия.ДокументРеализации, ИмяФайла);
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции

&НаСервере
Функция ПечатьУниверсальныхПередаточныхДокументов(МассивОбъектов, ОбъектыПечати, ТекстЗапросаДокументам, ТолькоПередаточныйДокумент = Ложь, ТабДокумент = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	Иначе
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДокумент.АвтоМасштаб        = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ЭкземпляровНаСтранице = 1;
	
	ТабДокумент.ИмяПараметровПечати = "УПДСПечатью";
	
	ПечатьТорговыхДокументов.УстановитьМинимальныеПоляПечати(ТабДокумент);
	
	Макет = ПолучитьМакет("ПФ_MXL_УниверсальныйПередаточныйДокументСПечатью");
	
	Если ТолькоПередаточныйДокумент Тогда
		ДанныеУниверсальныхПередаточныхДокументов = ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(
			МассивОбъектов, ТекстЗапросаДокументам);
	Иначе
		ДанныеУниверсальныхПередаточныхДокументов = УчетНДС.ПолучитьДанныеДляПечатиСчетаФактуры1137(
			МассивОбъектов, ТекстЗапросаДокументам, Истина);
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ВыборкаУПД ИЗ ДанныеУниверсальныхПередаточныхДокументов Цикл
		
		Если ВыборкаУПД.Дата < '20130101' Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДокумента = ВыборкаУПД.ТаблицаДокумента;
		Если ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаУПД);
		
		// Вывод подвала накладной
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНакладной");
		
		// Реализация. Выведем в печатную форму печать
		ДвоичныеДанныеПечати = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(ВыборкаУПД.ДанныеШапки.Поставщик, "ФайлПечать");
		Если ЗначениеЗаполнено(ДвоичныеДанныеПечати) Тогда 
			ОбластьМакета.Рисунки.Печать.Картинка = Новый Картинка(ДвоичныеДанныеПечати);
		КонецЕсли;
		ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(ВыборкаУПД.ДанныеШапки.Поставщик, "ФайлПодписьРуководителя");
		Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда 
			ОбластьМакета.Рисунки.ПодписьОтветственного.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			Если ВыборкаУПД.ДанныеШапки.Поставщик.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ОбластьМакета.Рисунки.ПодписьКладовщика.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			КонецЕсли;
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(ВыборкаУПД.ДанныеШапки);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент,
			НомерСтрокиНачало, ОбъектыПечати, ВыборкаУПД.Ссылка);
		
	КонецЦикла;
	
	Если МассивОбъектов.Количество() = 1 И ПервыйДокумент Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Для %1 универсальный передаточный документ не применяется'"), Строка(МассивОбъектов[0]));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование, ДанныеСчетаФактуры)
	
	ТекстПустойПоказатель = "--";
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		ДанныеДляПечати = Документы.ПередачаТоваров.ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ДокументОснование);
	Иначе
		ДанныеДляПечати = УчетНДС.ПодготовитьДанныеДляПечатиСчетовФактур(ДокументОснование, ДанныеСчетаФактуры);
	КонецЕсли;
	
	// Поля, которые в УПД со статусом 2 должны быть пустыми
	ПустыеПоляУПД = Новый Структура;
	ПустыеПоляУПД.Вставить("Акциз",                  ТекстПустойПоказатель);
	ПустыеПоляУПД.Вставить("СтавкаНДС",              Перечисления.СтавкиНДС.ПустаяСсылка());
	ПустыеПоляУПД.Вставить("НомерГТД",               Справочники.НомераГТД.ПустаяСсылка());
	ПустыеПоляУПД.Вставить("ПредставлениеГТД",       ТекстПустойПоказатель);
	ПустыеПоляУПД.Вставить("СтранаПроисхождения",    Справочники.СтраныМира.ПустаяСсылка());
	ПустыеПоляУПД.Вставить("СтранаПроисхожденияКод", ТекстПустойПоказатель);
	ПустыеПоляУПД.Вставить("ПредставлениеСтраны",    ТекстПустойПоказатель);
	
	Если ДанныеДляПечати.ТаблицаДокумента <> Неопределено Тогда
		Для Каждого СтрокаДокумента Из ДанныеДляПечати.ТаблицаДокумента Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ПустыеПоляУПД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляПечатиУниверсальногоПередаточногоДокумента(МассивОбъектов, ТекстЗапросаДокументам)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаДокументам;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений();
	ТаблицаСчетовФактур.Колонки.Добавить("ДанныеШапки");
	ТаблицаСчетовФактур.Колонки.Добавить("ТаблицаДокумента");
	ТаблицаСчетовФактур.Колонки.Добавить("ДокументыОснования");
	ТаблицаСчетовФактур.Колонки.Добавить("ВидСчетаФактуры");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактура");
	ТаблицаСчетовФактур.Колонки.Добавить("СчетФактураБезНДС");
	ТаблицаСчетовФактур.Колонки.Добавить("Дата");
	ТаблицаСчетовФактур.Колонки.Добавить("Ссылка");
	
	ДанныеСчетаФактуры = Новый Структура("СчетФактура, ВидСчетаФактуры, Контрагент, ДоговорКонтрагента, ИспользуетсяПостановлениеНДС1137");
	ДанныеСчетаФактуры.ИспользуетсяПостановлениеНДС1137 = Истина;
	
	ВыборкаПоОснованиям = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоОснованиям.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОснованиям.ДокументОснование) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыОснования = Новый Массив;
		ДокументыОснования.Добавить(ВыборкаПоОснованиям.ДокументОснование);
		
		ЗаполнитьЗначенияСвойств(ДанныеСчетаФактуры, ВыборкаПоОснованиям);
		ПараметрыОснования = ПодготовитьДанныеДляПечатиУниверсальныхПередаточныхДокументов(ВыборкаПоОснованиям.ДокументОснование, ДанныеСчетаФактуры);
		
		Если ПараметрыОснования.Реквизиты = Неопределено ИЛИ ПараметрыОснования.ТаблицаДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ТаблицаДокумента = ПараметрыОснования.ТаблицаДокумента;
		
		ТаблицаДокумента.Колонки.СуммаБезНДС.Имя = "Стоимость";
		
		ДанныеШапки = ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаПоОснованиям, ПараметрыОснования.Реквизиты[0], Неопределено, Истина);
		СчетФактура = ТаблицаСчетовФактур.Добавить();
		СчетФактура.Дата               = ВыборкаПоОснованиям.Дата;
		СчетФактура.СчетФактура        = ВыборкаПоОснованиям.СчетФактура;
		СчетФактура.ВидСчетаФактуры    = ВыборкаПоОснованиям.ВидСчетаФактуры;
		СчетФактура.СчетФактураБезНДС  = ВыборкаПоОснованиям.СчетФактураБезНДС;
		СчетФактура.ДанныеШапки        = ДанныеШапки;
		СчетФактура.ТаблицаДокумента   = ТаблицаДокумента;
		СчетФактура.ДокументыОснования = ДокументыОснования;
		СчетФактура.Ссылка             = ВыборкаПоОснованиям.ДокументОснование;
		
	КонецЦикла;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

&НаСервере
Процедура ВывестиСчетФактуруВТабличныйДокумент(ТабДокумент, Макет, ВыборкаСФ)
	
	ТаблицаДокумента = ВыборкаСФ.ТаблицаДокумента;
	
	// Вывод шапки
	
	ДанныеШапки   = ВыборкаСФ.ДанныеШапки;
	
	ВедетсяУчетНДСПоФЗ56 = УчетНДС.ВедетсяУчетНДСПоФЗ56(ДанныеШапки.Дата);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка625");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	
	НомерСчетаФактуры = "Универсальный передаточный документ № " + ДанныеШапки.Номер + " от " + Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
	
	ОбластьМакета.Параметры.Номер = ДанныеШапки.Номер;
	ОбластьМакета.Параметры.Дата  = Формат(ДанныеШапки.Дата, "ДЛФ='ДД'");
	
	ОбластьМакета.Параметры.НомерИсправления = ДанныеШапки.НомерИсправления;
	ОбластьМакета.Параметры.ДатаИсправления  = Формат(ДанныеШапки.ДатаИсправления, "ДЛФ='ДД'");
	
	ОбластьМакета.Параметры.ПоДокументу = ДанныеШапки.ПоДокументу;
	ОбластьМакета.Параметры.Валюта = ДанныеШапки.ВалютаНаименование;
	
	ОбластьМакета.Параметры.ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
	ОбластьМакета.Параметры.ИННПоставщика = ?(ДанныеШапки.Свойство("ИННКПППоставщика"), 
	ДанныеШапки.ИННКПППоставщика, 
	"" + ДанныеШапки.ИННПоставщика + ?(ЗначениеЗаполнено(ДанныеШапки.КПППоставщика), "/" + ДанныеШапки.КПППоставщика, ""));
	ОбластьМакета.Параметры.АдресПоставщика = ДанныеШапки.АдресПоставщика;
	ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеГрузоотправителя;
	
	ОбластьМакета.Параметры.ПредставлениеПокупателя = ДанныеШапки.ПредставлениеПокупателя;
	ОбластьМакета.Параметры.ИННПокупателя = ?(ДанныеШапки.Свойство("ИННКПППокупателя"), 
	ДанныеШапки.ИННКПППокупателя, 
	"" + ДанныеШапки.ИННПокупателя + ?(ЗначениеЗаполнено(ДанныеШапки.КПППокупателя), "/" + ДанныеШапки.КПППокупателя, ""));
	ОбластьМакета.Параметры.АдресПокупателя = ДанныеШапки.АдресПокупателя;
	ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеГрузополучателя;
	
	ТабДокумент.Вывести(ОбластьМакета);
	
	Если ВедетсяУчетНДСПоФЗ56 Тогда 
		ОбластьМакета = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
		ОбластьМакета.Параметры.ИдентификаторГосКонтракта = ДанныеШапки.ИдентификаторГосКонтракта;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;

	// Вывод заголовка таблицы

	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод табличной части
	
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	
	КоличествоСтраниц = 1;
	
	СчетФактураБезНДС = Истина;
	НДСНеВыставляетя  = Истина;
	
	НомерСтроки = 0;
	НомерЛиста = 1;
	КоличествоСтрок = ТаблицаДокумента.Количество();
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаДокумента.НомерСтроки = НомерСтроки;
		
		ОбластьМакета.Параметры.Заполнить(СтрокаДокумента);
		
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС) Тогда
			ОбластьМакета.Параметры.СтавкаНДС = "--";
			Если СтрокаДокумента.СуммаНДС = 0 Тогда
				ОбластьМакета.Параметры.СуммаНДС = "--";
			КонецЕсли;
		КонецЕсли;
		
		ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВыборкаСФ.ВидСчетаФактуры);
		
		Если НЕ ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьМакета, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, Истина) Тогда
			КоличествоСтраниц = КоличествоСтраниц + 1;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		СчетФактураБезНДС = СчетФактураБезНДС И СтрокаДокумента.СуммаНДС = 0
			И СтрокаДокумента.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		
		НДСНеВыставляетя = НДСНеВыставляетя И СтрокаДокумента.СуммаНДС = 0
			И НЕ ЗначениеЗаполнено(СтрокаДокумента.СтавкаНДС);
		
	КонецЦикла;

	ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ВместеСоСледующим = Истина;
	
	// Вывод итоговых сумм

	ОбластьМакета = Макет.ПолучитьОбласть("Итого");
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		ОбластьМакета.Параметры.ИтогоСтоимость = "--";
	Иначе
		ОбластьМакета.Параметры.ИтогоСтоимость = ТаблицаДокумента.Итог("Стоимость");
	КонецЕсли;
	
	Если НДСНеВыставляетя Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "--";
	ИначеЕсли СчетФактураБезНДС Тогда
		ОбластьМакета.Параметры.ИтогоСуммаНДС = "без НДС";
	Иначе
		ОбластьМакета.Параметры.ИтогоСуммаНДС = ТаблицаДокумента.Итог("СуммаНДС");
	КонецЕсли;
	
	ОбластьМакета.Параметры.ИтогоВсего = ТаблицаДокумента.Итог("Всего");
	ТабДокумент.Вывести(ОбластьМакета);

	// Вывод подвала
	КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		ОбщегоНазначенияБПКлиентСервер.ФормаМножественногоЧисла(
			НСтр("ru = 'листе'"), НСтр("ru = 'листах'"), НСтр("ru = 'листах'"), КоличествоСтраниц));
	
	ДанныеШапки.Вставить("КоличествоЛистов", КоличествоЛистов);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	// Реализация. Выведем в печатную форму картинки
	ДвоичныеДанныеПодписьРуководителя = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(ДанныеШапки.Поставщик, "ФайлПодписьРуководителя");
	ДвоичныеДанныеПодписьГлавногоБухгалтера = Справочники.Организации.ДвоичныеДанныеКартинкиОрганизации(ДанныеШапки.Поставщик, "ФайлПодписьГлавногоБухгалтера");
		
	Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) 
		ИЛИ ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
		// Подставляем подписи только ответственных лиц
		ОтветственныеЛицаОрганизации = ОтветственныеЛицаБП.ОтветственныеЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
		// В случае если используется факсимильная подпись выводим данные ответственных лиц
		Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьРуководителя) Тогда
			ДанныеШапки.Вставить("Руководитель", ОтветственныеЛицаОрганизации.Руководитель);
			ДанныеШапки.Вставить("ФИОРуководителя", ОтветственныеЛицаОрганизации.РуководительПредставление);
			ОбластьМакета.Рисунки.ПодписьРуководителя.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			Если ДанныеШапки.Поставщик.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ОбластьМакета.Рисунки.ПодписьИП.Картинка = Новый Картинка(ДвоичныеДанныеПодписьРуководителя);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДвоичныеДанныеПодписьГлавногоБухгалтера) Тогда
			ДанныеШапки.ГлавныйБухгалтер      = ОтветственныеЛицаОрганизации.ГлавныйБухгалтер;
			ДанныеШапки.ФИОГлавногоБухгалтера = ОтветственныеЛицаОрганизации.ГлавныйБухгалтерПредставление;
			ОбластьМакета.Рисунки.ПодписьГлавногоБухгалтера.Картинка = Новый Картинка(ДвоичныеДанныеПодписьГлавногоБухгалтера);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета.Параметры.Заполнить(ДанныеШапки);
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

&НаСервере
Процедура ДозаполнитьСтрокуСчетаФактуры1137(ОбластьМакета, ВидСчетаФактуры)

	Если ОбластьМакета.Параметры.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		ОбластьМакета.Параметры.СтавкаНДС = "без НДС";
		ОбластьМакета.Параметры.СуммаНДС  = "без НДС";
	КонецЕсли;
		
	// Проставляем прочерки в незаполненные графы в соответствии с Постановлением 1137
	Если ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		
		ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
		ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		
		ОбластьМакета.Параметры.Количество = "--";
		ОбластьМакета.Параметры.Цена       = "--";
		ОбластьМакета.Параметры.Стоимость  = "--";
		ОбластьМакета.Параметры.Акциз      = "--";
		
		ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
		ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
		ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмерения) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмерения    = "--";
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ЕдиницаИзмеренияКод) Тогда
			ОбластьМакета.Параметры.ЕдиницаИзмеренияКод = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Количество) Тогда
			ОбластьМакета.Параметры.Количество = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.Цена) Тогда
			ОбластьМакета.Параметры.Цена = "--";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбластьМакета.Параметры.ПредставлениеСтраны) Тогда
			ОбластьМакета.Параметры.СтранаПроисхожденияКод = "--";
			ОбластьМакета.Параметры.ПредставлениеСтраны    = "--";
			ОбластьМакета.Параметры.ПредставлениеГТД       = "--";
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьВыводСчетаФактурыНаСтраницу(ТабДокумент, ОбластьТекСтроки, ЭтоПоследняяСтрока, Макет, НомерЛиста, НомерСчетаФактуры, ЭтоУниверсальныйПередаточныйДокумент = Ложь)
	
	// Проверим возможность вывода табличного документа
	СтрокаСПодвалом = Новый Массив;
	СтрокаСПодвалом.Добавить(ОбластьТекСтроки);
	Если ЭтоПоследняяСтрока Тогда
		// Если последняя строка, то должен поместиться еще итог и подвал
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Итого"));
		СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("Подвал"));
		Если ЭтоУниверсальныйПередаточныйДокумент Тогда
			СтрокаСПодвалом.Добавить(Макет.ПолучитьОбласть("ПодвалНакладной"));
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбщегоНазначенияБПВызовСервера.ПроверитьВыводТабличногоДокумента(ТабДокумент, СтрокаСПодвалом);
	
	Если НЕ РезультатПроверки Тогда
		// Вывод разделителя и заголовка таблицы на новой странице
		
		НомерЛиста = НомерЛиста + 1;
		
		ОбластьНумерацияЛистов = Макет.ПолучитьОбласть("НумерацияЛистов");
		ОбластьНумерацияЛистов.Параметры.Номер = НомерСчетаФактуры;
		ОбластьНумерацияЛистов.Параметры.НомерЛиста = НомерЛиста;
		
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокумент.Вывести(ОбластьНумерацияЛистов);
		ТабДокумент.Вывести(Макет.ПолучитьОбласть("ЗаголовокТаблицы"));
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеШапкиСчетаФактуры1137(ВыборкаСФ, Реквизиты, ПлатежноРасчетныеДокументы, ДополнитьДаннымиУПД)

	СведенияОЮрФизЛицах = Новый Соответствие; // для хранения ранее полученных сведений
	
	ДанныеШапки = Новый Структура;
	
	// Номер и дата
	Если ВыборкаСФ.УдалитьПрефиксыИзНомера Тогда
		Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаСФ.Номер, Истина, Ложь);
	Иначе
		Номер = ВыборкаСФ.Номер;
	КонецЕсли;
	
	// Дополняем номер индексом обособленного подразделения (при необходимости)
	Если ЗначениеЗаполнено(Реквизиты.ЦифровойИндексОбособленногоПодразделения)
		И ВыборкаСФ.ЭтоСчетФактураВыданный
		И ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
		Номер = Номер + "/" + Реквизиты.ЦифровойИндексОбособленногоПодразделения;
	КонецЕсли;
		
	ДанныеШапки.Вставить("Номер", СокрЛП(Номер));
	ДанныеШапки.Вставить("Дата", ВыборкаСФ.Дата);
	
	// Номер и дата исправления
	ДанныеШапки.Вставить("Исправление", ВыборкаСФ.Исправление);
	Если ВыборкаСФ.Исправление Тогда
		ДанныеШапки.Вставить("НомерИсправления", ВыборкаСФ.НомерИсправления);
		ДанныеШапки.Вставить("ДатаИсправления", ВыборкаСФ.ДатаИсправления);
	Иначе 	
		ДанныеШапки.Вставить("НомерИсправления", "--");
		ДанныеШапки.Вставить("ДатаИсправления", "--");
	КонецЕсли;

	ДанныеШапки.Вставить("Поставщик", Реквизиты.Поставщик);

	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Организация, ВыборкаСФ.ДатаСведений);
	СведенияОЮрФизЛицах.Вставить(Реквизиты.Организация, СведенияОбОрганизации);
	
	Если Реквизиты.СводныйСФКомиссияПоЗакупке Тогда
		
		СведенияОПоставщике = СведенияОбОрганизации;
		
		ДанныеШапки.Вставить("ПредставлениеПоставщика", Реквизиты.Поставщик);
		
		ДанныеШапки.Вставить("АдресПоставщика", Реквизиты.АдресПоставщика);
		
		ДанныеШапки.Вставить("ИННКППпоставщика", Реквизиты.ИННКППпоставщика);
		
	Иначе	
		
		СведенияОПоставщике = СведенияОЮрФизЛицах[Реквизиты.Поставщик];
		Если СведенияОПоставщике = Неопределено Тогда
			СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Поставщик, ВыборкаСФ.ДатаСведений);
			СведенияОЮрФизЛицах.Вставить(Реквизиты.Поставщик, СведенияОПоставщике);
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес продавца
		ДанныеШапки.Вставить("АдресПоставщика", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ЮридическийАдрес,"));
		
	КонецЕсли;
	
	ДанныеШапки.Вставить("ИННпоставщика", Реквизиты.ИННпоставщика);
	
	Если НЕ ВыборкаСФ.ЭтоСчетФактураВыданный И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпоставщика = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КПППоставщика = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПоставщика, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпоставщика", КППпоставщика);
	
	// Наименование покупателя
	ДанныеШапки.Вставить("Покупатель", Реквизиты.Покупатель);
	
	Если Реквизиты.СводныйСФКомиссияПоПродаже Тогда
		
		ДанныеШапки.Вставить("ПредставлениеПокупателя", Реквизиты.Покупатель);
		
		ДанныеШапки.Вставить("АдресПокупателя", Реквизиты.АдресПокупателя);
		
		ДанныеШапки.Вставить("ИННКПППокупателя", Реквизиты.ИННКППпокупателя);

	Иначе
		
		СведенияОПокупателе = СведенияОЮрФизЛицах[Реквизиты.Покупатель];
		Если СведенияОПокупателе = Неопределено Тогда
			СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Покупатель, ВыборкаСФ.ДатаСведений);
			СведенияОЮрФизЛицах.Вставить(Реквизиты.Покупатель, СведенияОПокупателе);
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "НаименованиеДляПечатныхФорм,"));
		
		// Адрес покупателя
		ДанныеШапки.Вставить("АдресПокупателя", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ЮридическийАдрес,"));
			
	КонецЕсли;
	
	ДанныеШапки.Вставить("ИННпокупателя", Реквизиты.ИННпокупателя);
	
	Если ВыборкаСФ.ЭтоСчетФактураВыданный И ЗначениеЗаполнено(ВыборкаСФ.КППСчетаФактуры) Тогда
		КППпокупателя = ВыборкаСФ.КППСчетаФактуры;
	Иначе
		КППпокупателя = УчетНДСБП.КППНаДату(Реквизиты.ОбособленноеПодразделениеПокупателя, ВыборкаСФ.ДатаСведений);
	КонецЕсли;
	
	ДанныеШапки.Вставить("КППпокупателя", КППпокупателя);
	
	// Грузоотправитель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		Грузоотправитель = Неопределено;
		ПредставлениеГрузоотправителя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары 
		И ЗначениеЗаполнено(Реквизиты.Грузоотправитель) Тогда
		Если ТипЗнч(Реквизиты.Грузоотправитель) = Тип("Строка") Тогда
			ПредставлениеГрузоотправителя = Реквизиты.Грузоотправитель;
		ИначеЕсли ТипЗнч(Реквизиты.Грузоотправитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			СведенияОГрузоотправителе = СведенияОЮрФизЛицах[Реквизиты.Грузоотправитель];
			Если СведенияОГрузоотправителе = Неопределено Тогда
				СведенияОГрузоотправителе = УчетНДСПереопределяемый.СведенияОПодразделенииОрганизации(Реквизиты.Грузоотправитель);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Грузоотправитель, СведенияОГрузоотправителе);
			КонецЕсли;
			ПредставлениеГрузоотправителя = СведенияОГрузоотправителе;
		Иначе
			СведенияОГрузоотправителе = СведенияОЮрФизЛицах[Реквизиты.Грузоотправитель];
			Если СведенияОГрузоотправителе = Неопределено Тогда
				СведенияОГрузоотправителе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузоотправитель, ВыборкаСФ.ДатаСведений);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Грузоотправитель, СведенияОГрузоотправителе);
			КонецЕсли;
			ПредставлениеГрузоотправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ПочтовыйАдрес,");
		КонецЕсли;
		Грузоотправитель = Реквизиты.Грузоотправитель;	
	Иначе
		Грузоотправитель = Неопределено;
		ПредставлениеГрузоотправителя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеШапки.Вставить("ПредставлениеГрузоотправителя", ПредставлениеГрузоотправителя);

	// Грузополучатель
	Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
		Грузополучатель = Неопределено;
		ПредставлениеГрузополучателя = "--";
	ИначеЕсли Реквизиты.ЕстьТовары 
		И ЗначениеЗаполнено(Реквизиты.Грузополучатель) Тогда
		Если ТипЗнч(Реквизиты.Грузополучатель) = Тип("Строка") Тогда
			ПредставлениеГрузополучателя = Реквизиты.Грузополучатель;
		Иначе
			СведенияОГрузополучателе = СведенияОЮрФизЛицах[Реквизиты.Грузополучатель];
			Если СведенияОГрузополучателе = Неопределено Тогда
				СведенияОГрузополучателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Реквизиты.Грузополучатель, ВыборкаСФ.ДатаСведений);
				СведенияОЮрФизЛицах.Вставить(Реквизиты.Грузополучатель, СведенияОГрузополучателе);
			КонецЕсли;
			Если Реквизиты.АдресДоставки <> "" Тогда 
				СведенияОГрузополучателе.ПочтовыйАдрес = Реквизиты.АдресДоставки;
			КонецЕсли;
			ПредставлениеГрузополучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ПочтовыйАдрес,");
		КонецЕсли;
		Грузополучатель = Реквизиты.Грузополучатель;
	Иначе
		Грузополучатель = Неопределено;
		ПредставлениеГрузополучателя = "--";
	КонецЕсли;
	ДанныеШапки.Вставить("Грузополучатель", Грузополучатель);
	ДанныеШапки.Вставить("ПредставлениеГрузополучателя", ПредставлениеГрузополучателя);
	
	// Платежно-расчетный документ
	ПоДокументу = "";
	Если ПлатежноРасчетныеДокументы <> Неопределено Тогда
		ТаблицаПлатежныхДокументов = ПлатежноРасчетныеДокументы.СкопироватьКолонки();
		Если ТипЗнч(ПлатежноРасчетныеДокументы) = Тип("ТаблицаЗначений") Тогда
			Отбор = Новый Структура("СчетФактура", ВыборкаСФ.СчетФактура);
			НайденныеСтроки = ПлатежноРасчетныеДокументы.НайтиСтроки(Отбор);
			РазделятьПоКонтрагентам = ТаблицаПлатежныхДокументов.Колонки.Найти("Контрагент") <> Неопределено;
			ПредыдущийКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			Для каждого ДокументОплаты Из НайденныеСтроки Цикл
				Контрагент = ?(РазделятьПоКонтрагентам, ДокументОплаты.Контрагент, Справочники.Контрагенты.ПустаяСсылка());
				Если ЗначениеЗаполнено(ДокументОплаты.НомерДокумента)
					И ЗначениеЗаполнено(ДокументОплаты.ДатаДокумента) Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаПлатежныхДокументов.Добавить(), ДокументОплаты);
					ПоДокументу = ПоДокументу + ?(Не ДокументОплаты.НомерСтроки = 1 И Контрагент <> ПредыдущийКонтрагент, ";", ?(ПустаяСтрока(ПоДокументу), "",", ")) +
						ДокументОплаты.НомерДокумента + " от " + Формат(ДокументОплаты.ДатаДокумента, "ДЛФ='Д'") + " г.";
				КонецЕсли;
				ПредыдущийКонтрагент = Контрагент;	
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ПоДокументу) Тогда
		Если ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс
			ИЛИ ВыборкаСФ.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента Тогда
			ПоДокументу = "-- от --";
		Иначе
			ПоДокументу = "   от   ";
		КонецЕсли;
	КонецЕсли;
	ДанныеШапки.Вставить("ТаблицаПлатежныхДокументов", ТаблицаПлатежныхДокументов);
	ДанныеШапки.Вставить("ПоДокументу", ПоДокументу);
	
	// Валюта
	Если ЗначениеЗаполнено(Реквизиты.Валюта) Тогда
		Валюта = Реквизиты.Валюта.НаименованиеПолное + ", " + Реквизиты.Валюта.Код;
	Иначе
		Валюта = "";
	КонецЕсли;
	
	ДанныеШапки.Вставить("Валюта", Реквизиты.Валюта);
	ДанныеШапки.Вставить("ВалютаНаименование", Валюта);
	
	// Сведения о комиссионере
	Если ВыборкаСФ.ЭтоСчетФактураВыданный 
		И (ТипЗнч(Реквизиты.Поставщик) = Тип("СправочникСсылка.Контрагенты")
		ИЛИ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка"))
		И ТипЗнч(Реквизиты.Покупатель) = Тип("СправочникСсылка.Контрагенты") Тогда
		Комиссионер = Реквизиты.Организация;
	ИначеЕсли НЕ ВыборкаСФ.ЭтоСчетФактураВыданный 
		И ВыборкаСФ.Контрагент <> Реквизиты.Поставщик
		И ВыборкаСФ.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку Тогда
		Комиссионер = ВыборкаСФ.Контрагент;
	Иначе
		Комиссионер = Неопределено;
	КонецЕсли;
	
	СведенияОКомиссионере = Неопределено;
	Если ЗначениеЗаполнено(Комиссионер) Тогда
		
		СведенияОКомиссионере = СведенияОЮрФизЛицах[Комиссионер];
		Если СведенияОКомиссионере = Неопределено Тогда
			СведенияОКомиссионере = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Комиссионер, ВыборкаСФ.ДатаСведений);
			СведенияОЮрФизЛицах.Вставить(Комиссионер, СведенияОКомиссионере);
		КонецЕсли;
		КППКомиссионера = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "Составлен комиссионером (агентом): " 
			+ ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,")
			+ ", " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ЮридическийАдрес,")
			+ ", ИНН/КПП: " + ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь)
			+ ?(ЗначениеЗаполнено(КППКомиссионера), "/" + КППКомиссионера, ""));
	
	Иначе
	
		ДанныеШапки.Вставить("ПредставлениеКомиссионера", "");
	
	КонецЕсли;
	
	// Данные для подвала
	Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
		
		ОрганизацияЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Организация);
		
		// Получаем за один вызов данные по всем необходимым физлицам.
		СписокФизЛиц = Новый Массив;
		Если (ОрганизацияЭтоЮрЛицо ИЛИ УчетНДС.ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата))
		   И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
			СписокФизЛиц.Добавить(ВыборкаСФ.Руководитель);
		КонецЕсли;
		Если ОрганизацияЭтоЮрЛицо
		   И ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
			СписокФизЛиц.Добавить(ВыборкаСФ.ГлавныйБухгалтер);
		КонецЕсли;
		Если ДополнитьДаннымиУПД Тогда
			Если Реквизиты.ЕстьТовары Тогда
				Кладовщик = ?(ЗначениеЗаполнено(Реквизиты.ОтпускПроизвел), Реквизиты.ОтпускПроизвел,
					ОтветственныеЛицаБП.ОтветственноеЛицоНаСкладе(Реквизиты.Склад, Реквизиты.ДатаОснования));
				Если ЗначениеЗаполнено(Кладовщик) Тогда
					СписокФизЛиц.Добавить(Кладовщик);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда
				СписокФизЛиц.Добавить(Реквизиты.Исполнитель);
			КонецЕсли;
		КонецЕсли;
		Если СписокФизЛиц.Количество() > 0 Тогда
			ДанныеОтветственныхЛиц = УчетЗарплаты.ДанныеФизическихЛиц(Реквизиты.Организация, СписокФизЛиц, ВыборкаСФ.ДатаСведений, Истина, Истина);
		Иначе
			ДанныеОтветственныхЛиц = Новый ТаблицаЗначений;
			ДанныеОтветственныхЛиц.Колонки.Добавить("ФизическоеЛицо");
		КонецЕсли;
		
		Если ОрганизацияЭтоЮрЛицо Тогда
			
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Реквизиты.Организация, ВыборкаСФ.Дата, Реквизиты.Подразделение);
			ДанныеШапки.Вставить("ДолжностьРуководителя", Руководители.РуководительДолжностьПредставление);
			Если ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
				ПредставлениеФизЛица = ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление);
				ДанныеШапки.Вставить("ФИОРуководителя", ПредставлениеФизЛица);
				ДанныеШапки.Вставить("Руководитель",    ПредставлениеФизЛица);
			Иначе 
				ДанныеШапки.Вставить("ФИОРуководителя", Руководители.РуководительПредставление);
				ДанныеШапки.Вставить("Руководитель",    Руководители.Руководитель);

			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаСФ.ГлавныйБухгалтер) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.ГлавныйБухгалтер, "ФизическоеЛицо");
				ПредставлениеФизЛица = ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление);
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", ПредставлениеФизЛица);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      ПредставлениеФизЛица);
			Иначе 
				ДанныеШапки.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);
				ДанныеШапки.Вставить("ГлавныйБухгалтер",      Руководители.ГлавныйБухгалтер);
			КонецЕсли;
		
		Иначе
			ДанныеШапки.Вставить("ДолжностьРуководителя", НСтр("ru = 'Индивидуальный предприниматель'"));
			ДанныеШапки.Вставить("Свидетельство",         ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "Свидетельство,"));
			
			Если УчетНДС.ВедетсяУчетНДСПоФЗ81(ВыборкаСФ.Дата) 
			   И ЗначениеЗаполнено(ВыборкаСФ.Руководитель) Тогда
				ДанныеФизЛица = ДанныеОтветственныхЛиц.Найти(ВыборкаСФ.Руководитель, "ФизическоеЛицо");
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ?(ДанныеФизЛица = Неопределено, "", ДанныеФизЛица.Представление));
			Иначе
				ДанныеШапки.Вставить("ФИОПБОЮЛ", ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "ФамилияИнициалыФизлица,"));
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если НЕ ТипЗнч(Реквизиты.Поставщик) = Тип("Строка")
			И НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Реквизиты.Поставщик) Тогда
			ДанныеШапки.Вставить("Свидетельство",         ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "Свидетельство,"));
		КонецЕсли;
	КонецЕсли;
	
	// Данные для универсального передаточного документа
	Если ДополнитьДаннымиУПД Тогда
		
		// Наименование экономического субъекта - составителя документа
		Если ЗначениеЗаполнено(Комиссионер) И СведенияОКомиссионере <> Неопределено Тогда
			ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "НаименованиеДляПечатныхФорм,");
			ИННПоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "ИНН,", Ложь);
			КПППоставщика           = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОКомиссионере, "КПП,", Ложь);
		Иначе
			ПредставлениеПоставщика = ДанныеШапки.ПредставлениеПоставщика;
			ИННПоставщика           = ДанныеШапки.ИННПоставщика;
			КПППоставщика           = ДанныеШапки.КПППоставщика;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КПППоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ПредставлениеПоставщика, ИННПоставщика, КПППоставщика);
		ИначеЕсли ЗначениеЗаполнено(ИННПоставщика) Тогда
			ПредставлениеОрганизации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ПредставлениеПоставщика, ИННПоставщика);
		Иначе
			ПредставлениеОрганизации = ПредставлениеПоставщика;
		КонецЕсли;
		ДанныеШапки.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		
		Если ЗначениеЗаполнено(ДанныеШапки.КППпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН/КПП %2/%3'"),
				ДанныеШапки.ПредставлениеПокупателя, ДанныеШапки.ИННпокупателя, ДанныеШапки.КППпокупателя);
		ИначеЕсли ЗначениеЗаполнено(ДанныеШапки.ИННпокупателя) Тогда
			ПредставлениеКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1, ИНН %2'"),
				ДанныеШапки.ПредставлениеПокупателя, ДанныеШапки.ИННпокупателя);
		Иначе
			ПредставлениеКонтрагента = ДанныеШапки.ПредставлениеПокупателя;
		КонецЕсли;
		
		ДанныеШапки.Вставить("ПредставлениеКонтрагента", ПредставлениеКонтрагента);
		
		// Статус
		Если НЕ ЗначениеЗаполнено(ВыборкаСФ.ВидСчетаФактуры) Тогда
			СтатусУПД = 2;
			ДанныеШапки.Вставить("ПоДокументу",  "-- от --");
		Иначе
			СтатусУПД = 1;
		КонецЕсли;
		
		ДанныеШапки.Вставить("СтатусУПД", СтатусУПД);
		
		// Номер
		Если СтатусУПД = 2 Тогда
			Если ТипЗнч(ВыборкаСФ.ДокументОснование) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
				ДанныеШапки.Номер = ДанныеШапки.Номер + "/" + ВыборкаСФ.НомерСтроки;
			КонецЕсли;
		КонецЕсли;
		
		БезПереходаПраваСобственности = (Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
			ИЛИ ТипЗнч(Реквизиты.ДокументОснование) = Тип("ДокументСсылка.ПередачаТоваров");
		
		// Поставщик и Грузоотправитель
		Если БезПереходаПраваСобственности И СтатусУПД = 2 Тогда
			ДанныеШапки.Грузоотправитель              = ДанныеШапки.Поставщик;
			ДанныеШапки.ПредставлениеГрузоотправителя = ДанныеШапки.ПредставлениеПоставщика 
				+ ?(ПустаяСтрока(ДанныеШапки.АдресПоставщика), "", ", ") + ДанныеШапки.АдресПоставщика;
			
			ДанныеШапки.Поставщик               = Неопределено;
			ДанныеШапки.ПредставлениеПоставщика = "--";
			ДанныеШапки.АдресПоставщика         = "--";
			ДанныеШапки.ИННПоставщика           = "--";
			ДанныеШапки.КПППоставщика           = "";
		КонецЕсли;
		
		// Покупатель и Грузополучатель
		Если БезПереходаПраваСобственности И СтатусУПД = 2 Тогда
			ДанныеШапки.Грузополучатель              = ДанныеШапки.Покупатель;
			ДанныеШапки.ПредставлениеГрузополучателя = ДанныеШапки.ПредставлениеПокупателя
				+ ?(ПустаяСтрока(ДанныеШапки.АдресПокупателя), "", ", ") + ДанныеШапки.АдресПокупателя;
			
			ДанныеШапки.Покупатель              = Неопределено;
			ДанныеШапки.ПредставлениеПокупателя = "--";
			ДанныеШапки.АдресПокупателя         = "--";
			ДанныеШапки.ИННПокупателя           = "--";
			ДанныеШапки.КПППокупателя           = "";
		КонецЕсли;
		
		// Основание передачи (сдачи)
		Основание = СокрП(Реквизиты.Основание);
		
		ФИОТоварПолучил = "";
		
		Если ЗначениеЗаполнено(Реквизиты.ДоверенностьНомер)
			ИЛИ ЗначениеЗаполнено(Реквизиты.ДоверенностьДата)
			ИЛИ ЗначениеЗаполнено(Реквизиты.ДоверенностьВыдана)
			 Тогда
			
			Доверенность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по доверенности №%1 от %2 выданной %3'"),
				Реквизиты.ДоверенностьНомер, Формат(Реквизиты.ДоверенностьДата, "ДЛФ=ДД"),
				Реквизиты.ДоверенностьВыдана);
			
			Основание = Основание + ?(ПустаяСтрока(Основание), "", "; ") + Доверенность;
			
			ФИОТоварПолучил =  Реквизиты.ДоверенностьЧерезКого;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДоверенностьЧерезКого) Тогда
			
			ФИОТоварПолучил = Реквизиты.ДоверенностьЧерезКого+?(ЗначениеЗаполнено(Реквизиты.ЗаЗаказчикаНаОсновании),", "+Реквизиты.ЗаЗаказчикаНаОсновании,"");
			
		КонецЕсли;
		
		ДанныеШапки.Вставить ("Основание",       Основание);
		ДанныеШапки.Вставить ("ФИОТоварПолучил", ФИОТоварПолучил);
			
		Если ВыборкаСФ.ЭтоСчетФактураВыданный Тогда
			
			// Товар (груз) передал / услуги, результаты работ, права сдал
			
			Если Реквизиты.ЕстьТовары Тогда
				
				ДанныеКладовщика = ДанныеОтветственныхЛиц.Найти(Кладовщик, "ФизическоеЛицо");
				Если ДанныеКладовщика = Неопределено Тогда
					ДанныеШапки.Вставить("ДолжностьКладовщика");
					ДанныеШапки.Вставить("ФИОКладовщика", "");
				Иначе
					ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеКладовщика.Должность);
					ДанныеШапки.Вставить("ФИОКладовщика",       ДанныеКладовщика.Представление);
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда
					
					ДанныеИсполнителя = ДанныеОтветственныхЛиц.Найти(Реквизиты.Исполнитель, "ФизическоеЛицо");
					Если ДанныеИсполнителя = Неопределено Тогда
						ДанныеШапки.Вставить("ДолжностьКладовщика");
						ДанныеШапки.Вставить("ФИОКладовщика", "");
					Иначе
						ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеИсполнителя.Должность);
						ДанныеШапки.Вставить("ФИОКладовщика",       ?(ЗначениеЗаполнено(ДанныеИсполнителя.Представление), ДанныеИсполнителя.Представление, "")
							+ ?(ЗначениеЗаполнено(Реквизиты.ИсполнительНаОсновании), " ", "") + Реквизиты.ИсполнительНаОсновании);
					КонецЕсли;
					
				ИначеЕсли ОрганизацияЭтоЮрЛицо Тогда
					
					ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеШапки.ДолжностьРуководителя);
					ДанныеШапки.Вставить("ФИОКладовщика",       ДанныеШапки.ФИОРуководителя);
					
				Иначе
					
					ДанныеШапки.Вставить("ДолжностьКладовщика", ДанныеШапки.ДолжностьРуководителя);
					ДанныеШапки.Вставить("ФИОКладовщика",       ДанныеШапки.ФИОПБОЮЛ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Дата отгрузки, передачи (сдачи)
			ШаблонДатыОтгрузкиПередачи = Формат(ВыборкаСФ.Дата, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
			
			ДлинаДаты = 30;
			ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
			ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
			
			ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
				НСтр("ru = 'года'"));
			
			ДанныеШапки.Вставить ("ДатаОтгрузкиПередачи", ДатаОтгрузкиПередачи);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДанныеШапки;

КонецФункции

#КонецОбласти